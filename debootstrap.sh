mkdir ./rootfs
truncate -s 512M rootfs.img
parted -s rootfs.img mklabel msdos
echo "2048,69632,b,*," | sfdisk -u S -N1 -H 4 -S 16 -q rootfs.img
echo "141312,+,83,," | sfdisk -u S -N2 -H 4 -S 16 -q rootfs.img
loopd=$(kpartx -s -l rootfs.img -av | tail -1 | awk '{print $3}'); loopd=${loopd%%p?}; echo loopd=$loopd > /run/rootfs.loopd
mkfs.msdos -F 16 -n boot /dev/mapper/${loopd}p1
mkfs.ext4 -L root /dev/mapper/${loopd}p2

mount /dev/mapper/${loopd}p2 ./rootfs
mkdir ./rootfs/boot
mount /dev/mapper/${loopd}p1 ./rootfs/boot

debootstrap --variant=minbase --include=ifupdown,wireless-tools,net-tools,nano,wget,openssh-server,locales,dialog,ntp,cron,python-mysqldb,udhcpc,wpasupplicant,python-serial --no-check-gpg --arch armhf --foreign wheezy ./rootfs http://mirrordirector.raspbian.org/raspbian/
mkdir -p ./rootfs/usr/bin; cp /usr/bin/qemu-arm-static ./rootfs/usr/bin
chroot ./rootfs debootstrap/debootstrap --second-stage
chroot ./rootfs apt-get clean

chroot ./rootfs wget -O - http://apt.xbian.org/xbian.gpg.key | chroot ./rootfs apt-key add -

echo "deb http://archive.raspbian.org/raspbian wheezy main contrib non-free rpi" > ./rootfs/etc/apt/sources.list
echo "deb mirror://apt.xbian.org/mirror.txt stable main rpi-wheezy" > ./rootfs/etc/apt/sources.list.d/xbian.list
chroot ./rootfs apt-get update
chroot ./rootfs apt-get install firmware-ralink firmware-realtek firmware-atheros

chroot ./rootfs apt-get download xbian-package-kernel
mv ./rootfs/xbian-package-kernel* .
dpkg -x xbian-package-kernel* ./rootfs/
mv ./rootfs/boot/kernel.img* ./rootfs/boot/kernel.img
KVER=$(ls -Al ./rootfs/boot/ | sed -ne 's/.*System.map-\(.*\)/\1/p')
chroot ./rootfs depmod -a $KVER
rm xbian-package-kernel*

chroot ./rootfs apt-get download xbian-package-firmware;
mv ./rootfs/xbian-package-firmware* .
dpkg -x xbian-package-firmware* ./rootfs/
rm xbian-package-firmware*

mount -t proc proc rootfs/proc
chroot ./rootfs ln -fs /usr/share/zoneinfo/Europe/Amsterdam /etc/timezone
chroot ./rootfs ln -fs /usr/share/zoneinfo/Europe/Amsterdam /etc/localtime
echo "# File generated by update-locale
LANG=en_US.UTF-8
" > ./rootfs/etc/default/locale
chroot ./rootfs sed -i 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen || :
chroot ./rootfs locale-gen

chroot ./rootfs echo root:root | chroot ./rootfs chpasswd

echo "smartmeter.private" > ./rootfs/etc/hostname

sed -i '/ lo/d' ./rootfs/etc/network/interfaces >/dev/null 2>&1
sed -i '/ eth0/d' ./rootfs/etc/network/interfaces >/dev/null 2>&1
echo \
"auto lo
auto eth0
iface eth0 inet dhcp
iface lo inet loopback
allow-hotplug wlan0
iface wlan0 inet dhcp
iface default inet dhcp
" >> ./rootfs/etc/network/interfaces

cat << \EOF > ./rootfs/etc/init.d/p1read
#!/bin/sh

PATH=/bin:/usr/bin:/sbin:/usr/sbin
DESC="P1 read daemon"
NAME=p1read
DAEMON=/usr/local/sbin/p1read.py
SCRIPTNAME=/etc/init.d/p1read

test -f $DAEMON || exit 0

. /lib/lsb/init-functions

case "$1" in
	start)
		log_daemon_msg "Starting p1 reader"
		chmod 777 /dev/ttyAMA0
		/usr/local/sbin/p1read.py
		log_end_msg $?
	;;
	stop)
		log_daemon_msg "Stopping p1 reader"
		pkill p1read
		RETVAL=$?
		[ $RETVAL -eq 0 ] && [ -e "$PIDFILE" ] && rm -f $PIDFILE
		log_end_msg $RETVAL
	;;
	restart)
		log_daemon_msg "Restarting p1 reader"
		$0 stop
		$0 start
	;;
	status)
		status_of_proc -p $PIDFILE $DAEMON $NAME && exit 0 || exit $?
	;;
	*)
		log_action_msg "Usage: /etc/init.d/cron {start|stop|status|restart|reload|force-reload}"
		exit 2
	;;
esac
exit 0
EOF

chmod +x ./rootfs/etc/init.d/p1read
chroot ./rootfs ln -s /etc/init.d/p1read /etc/rcS.d/S08p1read
sed -i 's/TARGETS = /TARGETS = p1read /g' ./rootfs/etc/init.d/.depend.boot
echo "p1read: networking ifplugd" >> ./rootfs/etc/init.d/.depend.boot

cat << \BUMP > ./rootfs/etc/rc.local
#!/bin/sh
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.
export PYTHONPATH=/usr/lib/python2.6/
export PYTHONHOME=/usr/lib/python2.6/

PASSWD=$(sed -e 's/[\ ]/\n/g' /proc/cmdline | sed -ne 's/wlan.password=\(.*\)/\1/p')
SSID=$(sed -e 's/[\ ]/\n/g' /proc/cmdline | sed -ne 's/wlan.ssid=\(.*\)/\1/p')

if ! [ -z $PASSWD ] && ! [ -z $SSID ]; then
cat << \EOF > /etc/wpa_supplicant/wpa_supplicant.conf
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network={
	ssid="@SSID@"
	psk="@PASSWD@"
	proto=WPA
	key_mgmt=WPA-PSK
	pairwise=TKIP
	auth_alg=OPEN
}
EOF

sed -i "s/@SSID@/$SSID/g" /etc/wpa_supplicant/wpa_supplicant.conf
sed -i "s/@PASSWD@/$PASSWD/g" /etc/wpa_supplicant/wpa_supplicant.conf

pkill wpa_supplicant
iwconfig wlan0 essid $SSID
wpa_passphrase $SSID $PASSWD > /etc/wpa_supplicant/wpa_supplicant.conf
wpa_supplicant -Dwext -iwlan0 -c /etc/wpa_supplicant/wpa_supplicant.conf -B
udhcpc -i wlan0 -s /etc/udhcpc/default.script -t 5 -T 5 -b -x "hostname:$(cat /etc/hostname)"
fi

ifup wlan0
ifup eth0

echo "0 * * * * /usr/local/sbin/mysql.py" >> /cron.txt

crontab /cron.txt
rm /cron.txt

exit 0
BUMP

echo fuse > ./rootfs/proc/modules
echo "hardware BCM2708" > ./rootfs/proc/cpuinfo
echo -e '#!/bin/sh\necho RPI\n' > ./rootfs/usr/local/bin/xbian-arch; chmod +x ./rootfs/usr/local/bin/xbian-arch

chroot ./rootfs ln -s bin/busybox init

cat << \EOF > ./rootfs/boot/config.txt
sdtv_mode=2
framebuffer_width=800
framebuffer_height=600
overscan_left=40
overscan_right=20
overscan_top=20
overscan_bottom=20
disable_overscan=1
gpu_mem_256=32
gpu_mem_512=32
EOF

cat << \EOF > ./rootfs/boot/cmdline.txt
ip=:::::wlan0:dhcp ip=:::::eth0:dhcp dwc_otg.fiq_fix_enable=1 sdhci-bcm2708.sync_after_dma=0 dwc_otg.lpm_enable=0 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 mysql.password= mysql.username= mysql.host= mysql.database= wlan.password= wlan.ssid=
EOF

mkdir ./rootfs/cache/

wget --no-check-certificate https://raw.githubusercontent.com/CurlyMoo/RaspberryPi-P1-port/master/server/mysql.py
wget --no-check-certificate https://raw.githubusercontent.com/CurlyMoo/RaspberryPi-P1-port/master/server/p1read.py
mv mysql.py ./rootfs/usr/local/sbin/
mv p1read.py ./rootfs/usr/local/sbin/
chmod +x ./rootfs/usr/local/sbin/mysql.py
chmod +x ./rootfs/usr/local/sbin/p1read.py

rm ./rootfs/usr/bin/qemu-arm-static
umount ./rootfs/proc

umount ./rootfs/boot
umount ./rootfs
kpartx -d rootfs.img

# Done. You can now write rootfs.img to your SD card.
# Edit the cmdline.txt variables in line with your setup.
